datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model OTP {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  role      Role
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id         String   @id @default(uuid())
  username   String
  email      String   @unique
  password   String
  role       Role     @default(PROJECT_MEMBER)
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Projects this user manages
  managedProjects Project[] @relation("ProjectManager")

  // Projects this user is a member of
  memberProjects ProjectMember[]

  // Tasks assigned to this user
  assignedTasks Task[] @relation("TaskAssignee")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  tags        String[]
  deadline    DateTime
  priority    Priority @default(MEDIUM)
  image       String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Manager of this project
  projectManager   User?   @relation("ProjectManager", fields: [projectManagerId], references: [id], onDelete: Cascade)
  projectManagerId String?

  // Members of this project
  members ProjectMember[]

  // Tasks in this project
  tasks Task[] @relation("ProjectTasks")

  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  name        String
  tags        String[]
  deadline    DateTime
  description String     @db.Text
  status      TaskStatus @default(TODO)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Assignee relation
  assigneeId String?
  assignee   User?   @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: Cascade)

  // Project relation
  projectId String
  project   Project @relation("ProjectTasks", fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  joinedAt  DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

enum Role {
  PROJECT_MANAGER
  PROJECT_MEMBER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}
